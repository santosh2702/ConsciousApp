{"ast":null,"code":"var _jsxFileName = \"/Users/santoshkumar/Desktop/ConsciousApp/frontend/src/components/ConsciousMode.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000', {\n  transports: ['websocket'],\n  reconnectionAttempts: 5,\n  reconnectionDelay: 1000\n});\nconst ConsciousMode = ({\n  userId,\n  setProgress\n}) => {\n  _s();\n  const [input, setInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to SocketIO server');\n      setError(null);\n    });\n    socket.on('connect_error', err => {\n      console.error('SocketIO connection error:', err);\n      setError('Failed to connect to server: ' + err.message);\n    });\n    socket.on('dream_response', data => {\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setResponse(data.response);\n        setProgress(data.progress);\n        setError(null);\n      }\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('connect_error');\n      socket.off('dream_response');\n    };\n  }, [setProgress]);\n  const handleSubmit = () => {\n    if (!input.trim()) {\n      setError('Please enter a dream');\n      return;\n    }\n    socket.emit('dream', {\n      user_id: userId,\n      dream_text: input\n    }, ack => {\n      if (!ack) {\n        setError('Failed to send dream to server');\n      }\n    });\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"conscious-mode\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Conscious Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter your dream...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Interpret\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), response && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"response\",\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ConsciousMode, \"Ao4J+o58DQga+80wQAXfh88kAbc=\");\n_c = ConsciousMode;\nexport default ConsciousMode;\nvar _c;\n$RefreshReg$(_c, \"ConsciousMode\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","transports","reconnectionAttempts","reconnectionDelay","ConsciousMode","userId","setProgress","_s","input","setInput","response","setResponse","error","setError","on","console","log","err","message","data","progress","off","handleSubmit","trim","emit","user_id","dream_text","ack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/santoshkumar/Desktop/ConsciousApp/frontend/src/components/ConsciousMode.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:5000', { \n  transports: ['websocket'],\n  reconnectionAttempts: 5,\n  reconnectionDelay: 1000\n});\n\nconst ConsciousMode = ({ userId, setProgress }) => {\n  const [input, setInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to SocketIO server');\n      setError(null);\n    });\n    socket.on('connect_error', (err) => {\n      console.error('SocketIO connection error:', err);\n      setError('Failed to connect to server: ' + err.message);\n    });\n    socket.on('dream_response', (data) => {\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setResponse(data.response);\n        setProgress(data.progress);\n        setError(null);\n      }\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('connect_error');\n      socket.off('dream_response');\n    };\n  }, [setProgress]);\n\n  const handleSubmit = () => {\n    if (!input.trim()) {\n      setError('Please enter a dream');\n      return;\n    }\n    socket.emit('dream', { user_id: userId, dream_text: input }, (ack) => {\n      if (!ack) {\n        setError('Failed to send dream to server');\n      }\n    });\n  };\n\n  if (error) {\n    return <div className=\"error\">Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"conscious-mode\">\n      <h2>Conscious Mode</h2>\n      <textarea \n        value={input} \n        onChange={(e) => setInput(e.target.value)} \n        placeholder=\"Enter your dream...\" \n      />\n      <button onClick={handleSubmit}>Interpret</button>\n      {response && <p className=\"response\">{response}</p>}\n    </div>\n  );\n};\n\nexport default ConsciousMode;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}