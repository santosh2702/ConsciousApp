{"ast":null,"code":"var _jsxFileName = \"/Users/santoshkumar/Desktop/ConsciousApp/frontend/src/components/ConsciousMode.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000', {\n  transports: ['websocket'],\n  reconnectionAttempts: 5,\n  reconnectionDelay: 1000,\n  withCredentials: true\n});\nconst ConsciousMode = ({\n  userId,\n  setProgress\n}) => {\n  _s();\n  const [input, setInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to SocketIO server (Conscious Mode)');\n      setError(null);\n    });\n    socket.on('connect_error', err => {\n      console.error('SocketIO connection error:', err);\n      setError('Failed to connect to server: ' + err.message);\n    });\n    socket.on('dream_response', data => {\n      console.log('Received dream_response:', data);\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setResponse(data.response);\n        setProgress(data.progress);\n        setError(null);\n      }\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('connect_error');\n      socket.off('dream_response');\n    };\n  }, [setProgress]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!input.trim()) {\n      setError('Please enter a dream');\n      return;\n    }\n    console.log('Sending dream:', {\n      user_id: userId,\n      dream_text: input\n    });\n    socket.emit('dream', {\n      user_id: userId,\n      dream_text: input\n    }, ack => {\n      if (!ack) {\n        setError('Failed to send dream to server');\n      } else {\n        console.log('Dream sent successfully:', ack);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"conscious-mode\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Dream Interpreter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Describe your dream...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Interpret Dream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this), response && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"response\",\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(ConsciousMode, \"Ao4J+o58DQga+80wQAXfh88kAbc=\");\n_c = ConsciousMode;\nexport default ConsciousMode;\nvar _c;\n$RefreshReg$(_c, \"ConsciousMode\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","transports","reconnectionAttempts","reconnectionDelay","withCredentials","ConsciousMode","userId","setProgress","_s","input","setInput","response","setResponse","error","setError","on","console","log","err","message","data","progress","off","handleSubmit","e","preventDefault","trim","user_id","dream_text","emit","ack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","type","_c","$RefreshReg$"],"sources":["/Users/santoshkumar/Desktop/ConsciousApp/frontend/src/components/ConsciousMode.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:5000', { \n  transports: ['websocket'],\n  reconnectionAttempts: 5,\n  reconnectionDelay: 1000,\n  withCredentials: true\n});\n\nconst ConsciousMode = ({ userId, setProgress }) => {\n  const [input, setInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to SocketIO server (Conscious Mode)');\n      setError(null);\n    });\n    socket.on('connect_error', (err) => {\n      console.error('SocketIO connection error:', err);\n      setError('Failed to connect to server: ' + err.message);\n    });\n    socket.on('dream_response', (data) => {\n      console.log('Received dream_response:', data);\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setResponse(data.response);\n        setProgress(data.progress);\n        setError(null);\n      }\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('connect_error');\n      socket.off('dream_response');\n    };\n  }, [setProgress]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!input.trim()) {\n      setError('Please enter a dream');\n      return;\n    }\n    console.log('Sending dream:', { user_id: userId, dream_text: input });\n    socket.emit('dream', { user_id: userId, dream_text: input }, (ack) => {\n      if (!ack) {\n        setError('Failed to send dream to server');\n      } else {\n        console.log('Dream sent successfully:', ack);\n      }\n    });\n  };\n\n  return (\n    <div className=\"conscious-mode\">\n      <h2>Dream Interpreter</h2>\n      <form onSubmit={handleSubmit}>\n        <textarea \n          value={input} \n          onChange={(e) => setInput(e.target.value)} \n          placeholder=\"Describe your dream...\" \n        />\n        <button type=\"submit\">Interpret Dream</button>\n      </form>\n      {error && <p className=\"error\">Error: {error}</p>}\n      {response && <p className=\"response\">{response}</p>}\n    </div>\n  );\n};\n\nexport default ConsciousMode;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}