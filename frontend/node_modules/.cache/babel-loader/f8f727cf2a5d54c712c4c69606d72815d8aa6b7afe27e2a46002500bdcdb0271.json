{"ast":null,"code":"var _jsxFileName = \"/Users/santoshkumar/Desktop/ConsciousApp/frontend/src/components/ConsciousMode.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000', {\n  transports: ['websocket']\n});\nconst ConsciousMode = ({\n  userId,\n  setProgress\n}) => {\n  _s();\n  const [input, setInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to SocketIO server');\n    });\n    socket.on('connect_error', err => {\n      console.error('SocketIO connection error:', err);\n      setError('Failed to connect to server');\n    });\n    socket.on('dream_response', data => {\n      setResponse(data.response);\n      setProgress(data.progress);\n      setError(null);\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('connect_error');\n      socket.off('dream_response');\n    };\n  }, [setProgress]);\n  const handleSubmit = () => {\n    if (!input.trim()) {\n      setError('Please enter a dream');\n      return;\n    }\n    socket.emit('dream', {\n      user_id: userId,\n      dream_text: input\n    }, ack => {\n      if (!ack) {\n        setError('Failed to send dream to server');\n      }\n    });\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"conscious-mode\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Conscious Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter your dream...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Interpret\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(ConsciousMode, \"Ao4J+o58DQga+80wQAXfh88kAbc=\");\n_c = ConsciousMode;\nexport default ConsciousMode;\nvar _c;\n$RefreshReg$(_c, \"ConsciousMode\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","transports","ConsciousMode","userId","setProgress","_s","input","setInput","response","setResponse","error","setError","on","console","log","err","data","progress","off","handleSubmit","trim","emit","user_id","dream_text","ack","children","fileName","_jsxFileName","lineNumber","columnNumber","className","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/santoshkumar/Desktop/ConsciousApp/frontend/src/components/ConsciousMode.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:5000', { transports: ['websocket'] });\n\nconst ConsciousMode = ({ userId, setProgress }) => {\n  const [input, setInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to SocketIO server');\n    });\n    socket.on('connect_error', (err) => {\n      console.error('SocketIO connection error:', err);\n      setError('Failed to connect to server');\n    });\n    socket.on('dream_response', (data) => {\n      setResponse(data.response);\n      setProgress(data.progress);\n      setError(null);\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('connect_error');\n      socket.off('dream_response');\n    };\n  }, [setProgress]);\n\n  const handleSubmit = () => {\n    if (!input.trim()) {\n      setError('Please enter a dream');\n      return;\n    }\n    socket.emit('dream', { user_id: userId, dream_text: input }, (ack) => {\n      if (!ack) {\n        setError('Failed to send dream to server');\n      }\n    });\n  };\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"conscious-mode\">\n      <h2>Conscious Mode</h2>\n      <textarea value={input} onChange={(e) => setInput(e.target.value)} placeholder=\"Enter your dream...\" />\n      <button onClick={handleSubmit}>Interpret</button>\n      <p>{response}</p>\n    </div>\n  );\n};\n\nexport default ConsciousMode;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}